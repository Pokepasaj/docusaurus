"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[976],{7879:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"intro","title":"Intro","description":"Getting Started","source":"@site/docs/intro.md","sourceDirName":".","slug":"/","permalink":"/docusaurus/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"slug":"/"}}');var s=t(4848),o=t(8453);const i={sidebar_position:1,slug:"/"},r="Intro",l={},p=[{value:"Getting Started",id:"getting-started",level:2},{value:"Deployment &amp; SVC Template",id:"deployment--svc-template",level:3},{value:"Manifests",id:"manifests",level:3},{value:"Extending the extensions",id:"extending-the-extensions",level:3}];function m(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"intro",children:"Intro"})}),"\n",(0,s.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsx)(n.p,{children:"lets say we want to make a deployment and a service we will start by creating templates (I know this looks like HELM but bare with me it`s way more flexible)"}),"\n",(0,s.jsx)(n.h3,{id:"deployment--svc-template",children:"Deployment & SVC Template"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: %(name)s\n  labels:\n    name: %(name)s\nspec:\n  replicas: %(replicas)s\n  selector:\n    matchLabels:\n      name: %(name)s\n  template:\n    metadata:\n      labels:\n        name: %(name)s\n    spec:\n      containers:\n        - name: node\n          image: %(image)s\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: %(ports.node)s\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  name: %(name)s\nspec:\n  ports:\n    - name: http\n      port: %(ports.http)s\n      targetPort: %(ports.node)s\n  selector:\n    name: %(name)s\n"})}),"\n",(0,s.jsx)(n.p,{children:"Note:\nWe use the python style template (fstring) you have to refer to jsonnet documents for that\nreplicas: %(replicas)s \u2192 it`s always important that if you are to make a string template like this that you provide something with it hence if we comment it out it will break rendering"}),"\n",(0,s.jsx)(n.h3,{id:"manifests",children:"Manifests"}),"\n",(0,s.jsx)(n.p,{children:"Now that we have our templates we should create our manifests which will utilize the templates\nexample-deployment.libsonnet and example-svc.libsonnet files have been created and their content is:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsonnet",children:"example-deployment.libsonnet\n\nlocal k = import 'konn/main.libsonnet'; \n\nk.manifest(\n  props={\n    replicas: 1,\n    name: 'example',\n    image: '750126809429.dkr.ecr.eu-central-1.amazonaws.com/flaskapp',\n    \n\tports: {\n      node: 3000,\n    },\n    //\n  },\n    render=function(ctx, props) (\n    [k.yaml(importstr './template-deploy.yaml', props + {\n\n      \"ports.node\": props.ports.node,\n     }),\n    \n     ] \n  ),\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Okay starting from top to bottom we first import konn and assign it to k\nSecond we use the manifest function to create a new manifest object this function take ctx and props\n\u2022 props: Defines key values that will be passed into the manifest."}),"\n",(0,s.jsx)(n.p,{children:'Third we user render function: it takes ctx and props\nInside the function we use k.yaml to parse our yaml file template-deploy.yaml\nThe properties are then passed into out yaml template\n"ports.node": props.ports.node, ensures that ports.node is properly mapped inside the template. (dot notation was causing issues so we have to add port.node like that)'}),"\n",(0,s.jsx)(n.p,{children:"Now we evaluate it using vscode \u2192 ctrl + shit + p \u2192 jsonnet: Evaluate File (YAML) \u2192 this will open a separate window with the output"}),"\n",(0,s.jsx)(n.p,{children:"This is the YAML output"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"body:\n  - apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      labels:\n        name: example\n      name: example\n    spec:\n      replicas: 1\n      selector:\n        matchLabels:\n          name: example\n      template:\n        metadata:\n          labels:\n            name: example\n        spec:\n          containers:\n            - image: 750126809429.dkr.ecr.eu-central-1.amazonaws.com/flaskapp\n              imagePullPolicy: IfNotPresent\n              name: node\n              ports:\n                - containerPort: 3000\n"})}),"\n",(0,s.jsx)(n.p,{children:"Next we create example-svc.libsonnet"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsonnet",children:"local k = import 'konn/main.libsonnet';\n\n//\nk.manifest(\n  function(ctx, props) (\n    [k.yaml(importstr './svc-template.yaml', props + {\n      \"ports.http\": props.ports.http,\n      \"ports.node\": props.ports.node,\n    })]\n  ),\n  {\n\n    name: 'node',\n    ports: {\n      http: 80,\n      node: 3000,\n    },\n  }\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"We are just following the same steps here."}),"\n",(0,s.jsx)(n.p,{children:"YAML output"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"body:\n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: node\n    spec:\n      ports:\n        - name: http\n          port: 80\n          targetPort: 3000\n      selector:\n        name: node\n"})}),"\n",(0,s.jsx)(n.h3,{id:"extending-the-extensions",children:"Extending the extensions"}),"\n",(0,s.jsx)(n.p,{children:"Okay now we can call get both the svc and deployment all together in one output and edit the props or extend them in this one file\nmain.libsonnet"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsonnet",children:"local k = import 'konn/main.libsonnet';\n\n\nk.feature(\n    props={\n        name: 'example123',\n    },\n    configs=[\n        import 'example-deployment.libsonnet',\n        import 'example-svc.libsonnet'\n    ]\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"k.feature \u2192 The function creates a new feature instance, passing all these values."}),"\n",(0,s.jsx)(n.p,{children:"configs \u2192 Includes both of our libsonnet files"}),"\n",(0,s.jsx)(n.p,{children:"Now when we evaluate notice that the props from main.libsonnet are prioritized  and all names both on Deployment and the SVC have been changed to example123"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"body:\n  - apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      labels:\n        name: example123\n      name: example123\n    spec:\n      replicas: 1\n      selector:\n        matchLabels:\n          name: example123\n      template:\n        metadata:\n          labels:\n            name: example123\n        spec:\n          containers:\n            - image: 750126809429.dkr.ecr.eu-central-1.amazonaws.com/flaskapp\n              imagePullPolicy: IfNotPresent\n              name: node\n              ports:\n                - containerPort: 3000\n  - apiVersion: v1\n    kind: Service\n    metadata:\n      name: example123\n    spec:\n      ports:\n        - name: http\n          port: 80\n          targetPort: 3000\n      selector:\n        name: example123\n"})}),"\n",(0,s.jsx)(n.p,{children:"Lets say you don`t want main.libsonnet to edit the name of the svc and we want to keep the name in our extension example-svc.libsonnet"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsonnet",children:"local k = import 'konn/main.libsonnet';\nlocal svc = import 'example-svc.libsonnet';\n\nk.feature(\n    props={\n        name: 'example123',\n    },\n    configs=[\n        import 'example-deployment.libsonnet',\n       // import 'example-svc.libsonnet'  \u2192 we comment out this import unless we want service with the name example123 and the one we imported below\n    ]\n) +{\n    svcname:svc,\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Notice i imported the svc after the props are introduced and after the function is closed.\nNow every value and prop from the extension will be taken in account instead for the SVC"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"body:\n  - apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      labels:\n        name: example123\n      name: example123\n    spec:\n      replicas: 1\n      selector:\n        matchLabels:\n          name: example123\n      template:\n        metadata:\n          labels:\n            name: example123\n        spec:\n          containers:\n            - image: 750126809429.dkr.ecr.eu-central-1.amazonaws.com/flaskapp\n              imagePullPolicy: IfNotPresent\n              name: node\n              ports:\n                - containerPort: 3000\nsvcname:\n  body:\n    - apiVersion: v1\n      kind: Service\n      metadata:\n        name: node\n      spec:\n        ports:\n          - name: http\n            port: 80\n            targetPort: 3000\n        selector:\n          name: node\n"})})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var a=t(6540);const s={},o=a.createContext(s);function i(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);