"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[364],{8218:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"util","title":"util","description":"This module provides utility functions for conditional logic, templating, and parsing YAML/JSON documents. It is designed to enhance flexibility and cleanliness when managing configurations.","source":"@site/docs/util.md","sourceDirName":".","slug":"/util","permalink":"/docusaurus/util","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/util.md","tags":[],"version":"current","frontMatter":{"id":"util","title":"util"},"sidebar":"LearnSidebar","previous":{"title":"manifest","permalink":"/docusaurus/manifest"},"next":{"title":"main","permalink":"/docusaurus/main"}}');var s=e(4848),a=e(8453);const o={id:"util",title:"util"},l=void 0,r={},u=[{value:"Conditional Utility Functions",id:"conditional-utility-functions",level:2},{value:"YAML &amp; JSON Parsing Functions",id:"yaml--json-parsing-functions",level:2},{value:"Examples",id:"examples",level:3}];function c(t){const n={h2:"h2",h3:"h3",p:"p",...(0,a.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"This module provides utility functions for conditional logic, templating, and parsing YAML/JSON documents. It is designed to enhance flexibility and cleanliness when managing configurations."}),"\n",(0,s.jsx)(n.p,{children:"onlyIf & onlyIfArray \u2192 Enable conditional configuration application.\ntemplate \u2192 Formats strings while automatically removing null values.\nyaml & json \u2192 Parse structured configuration files with templating support."}),"\n",(0,s.jsx)(n.h2,{id:"conditional-utility-functions",children:"Conditional Utility Functions"}),"\n",(0,s.jsxs)(n.p,{children:["\u2022 onlyIf(test, patch, default=",") \u2192 Conditionally applies a patch if test evaluates to true, otherwise returns default (an empty object by default)."]}),"\n",(0,s.jsx)(n.p,{children:"\u2022 onlyIfArray(test, patch, default=[]) \u2192 Similar to onlyIf, but defaults to an empty array instead of an object. Useful when working with lists."}),"\n",(0,s.jsxs)(n.p,{children:["\u2022 template(str, props=",") \u2192\nProcesses a string with placeholders (%(key)s) and replaces them with values from props.\nIf a placeholder resolves to null, removes the corresponding line to maintain clean formatting."]}),"\n",(0,s.jsx)(n.h2,{id:"yaml--json-parsing-functions",children:"YAML & JSON Parsing Functions"}),"\n",(0,s.jsxs)(n.p,{children:["\u2022 yaml(str, props=",", single=true, template=true)\nParses a YAML string into a Jsonnet object.\nSupports templating before parsing.\nCan return a single document or an array of documents."]}),"\n",(0,s.jsxs)(n.p,{children:["\u2022 json(str, props=",", single=true, template=true)\nWorks like yaml, but for JSON strings.\nParses a JSON string with optional templating."]}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"})]})}function d(t={}){const{wrapper:n}={...(0,a.R)(),...t.components};return n?(0,s.jsx)(n,{...t,children:(0,s.jsx)(c,{...t})}):c(t)}},8453:(t,n,e)=>{e.d(n,{R:()=>o,x:()=>l});var i=e(6540);const s={},a=i.createContext(s);function o(t){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function l(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:o(t.components),i.createElement(a.Provider,{value:n},t.children)}}}]);