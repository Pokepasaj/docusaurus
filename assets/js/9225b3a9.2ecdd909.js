"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[950],{5800:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"config","title":"config","description":"This module manages and transforms configuration objects.It provides functions to create, modify, and extract configurations while maintaining flexibility for dynamic adjustments.","source":"@site/docs/config.md","sourceDirName":".","slug":"/config","permalink":"/docusaurus/config","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/config.md","tags":[],"version":"current","frontMatter":{"id":"config","title":"config"},"sidebar":"LearnSidebar","previous":{"title":"app","permalink":"/docusaurus/app"},"next":{"title":"context","permalink":"/docusaurus/context"}}');var o=t(4848),a=t(8453);const c={id:"config",title:"config"},r=void 0,s={},d=[{value:"Examples",id:"examples",level:2},{value:"config",id:"config",level:3},{value:"YAML output",id:"yaml-output",level:3},{value:"config extend",id:"config-extend",level:3},{value:"YAML output",id:"yaml-output-1",level:3},{value:"config from object",id:"config-from-object",level:3},{value:"YAML output",id:"yaml-output-2",level:3},{value:"config override function",id:"config-override-function",level:3},{value:"YAML output",id:"yaml-output-3",level:3},{value:"config override",id:"config-override",level:3},{value:"YAML output",id:"yaml-output-4",level:3}];function l(n){const e={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:"This module manages and transforms configuration objects.It provides functions to create, modify, and extract configurations while maintaining flexibility for dynamic adjustments."}),"\n",(0,o.jsx)(e.p,{children:"\u2022 from \u2192 Creates a new configuration from an object or a renderable object\nIf the source is already a configuration, it returns the original source.\nUses a manifest render function to handle the source if it's renderable.\nEnsures that the result is a valid object; otherwise, it throws an error."}),"\n",(0,o.jsx)(e.p,{children:"\u2022 fromYaml \u2192\nCreates a configuration from a YAML string.\nEnsures the YAML document is a single configuration (not an array)."}),"\n",(0,o.jsx)(e.p,{children:"\u2022 fromJson \u2192\nSimilar to fromYaml, but for JSON strings.\nConverts the JSON into a configuration while ensuring it is a single document."}),"\n",(0,o.jsx)(e.p,{children:"\u2022 new \u2192\nCreates a new configuration object.\nStores the configurations render function and properties."}),"\n",(0,o.jsx)(e.p,{children:"\u2022 render \u2192\nResolves properties and renders the configuration using the stored render function."}),"\n",(0,o.jsx)(e.p,{children:"\u2022 extend \u2192\nExtends an existing configuration by applying a transformation function.\nThe function receives the current configuration and modifies it."}),"\n",(0,o.jsx)(e.p,{children:"\u2022 override \u2192\nOverrides specific properties of a configuration.\nAccepts either an object (new properties) or a function (to compute the new properties dynamically)."}),"\n",(0,o.jsx)(e.p,{children:"\u2022 get (path, defaultValue=null)\u2192\nRetrieves a value from the configuration using a dot-separated path.\nReturns defaultValue if the path does not exist."}),"\n",(0,o.jsx)(e.p,{children:"\u2022 is (kind, name=null)\u2192"}),"\n",(0,o.jsx)(e.p,{children:'\u2022 Checks whether the configuration matches a given kind (e.g., "Deployment").\nIf name is provided, also checks if the resource has the specified name.'}),"\n",(0,o.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(e.h3,{id:"config",children:"config"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"local config = import '../../config.libsonnet';\n\nlocal testConfig = config.new(function(ctx, props) {\n  kind: 'config',\n  metadata: {\n    name: props.name,\n  },\n}, {\n  name: 'test',\n});\n\n{\n  actual: testConfig.render(),\n  expect: {\n    kind: 'config',\n    metadata: {\n      name: 'test',\n    },\n  },\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"yaml-output",children:"YAML output"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:"actual:\n  kind: config\n  metadata:\n    name: test\nexpect:\n  kind: config\n  metadata:\n    name: test\n"})}),"\n",(0,o.jsx)(e.h3,{id:"config-extend",children:"config extend"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"local config = import '../../config.libsonnet';\n\nlocal config = import '../../config.libsonnet';\n\nlocal testConfig = config.new(function(ctx, props) {\n  kind: 'config',\n  metadata: {\n    name: props.name,\n  },\n}, {\n  name: 'test',\n}).extend(\n  function(ctx, config, props) (\n    config {\n      extended: true,\n    }\n  ), {\n    name: 'not-test',\n  }\n);\n\n{\n  actual: testConfig.render(),\n  expect: {\n    extended: true,\n    kind: 'config',\n    metadata: {\n      name: 'not-test',\n    },\n  },\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"yaml-output-1",children:"YAML output"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:"actual:\n  extended: true\n  kind: config\n  metadata:\n    name: not-test\nexpect:\n  extended: true\n  kind: config\n  metadata:\n    name: not-test\n"})}),"\n",(0,o.jsx)(e.h3,{id:"config-from-object",children:"config from object"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"local config = import '../../config.libsonnet';\nlocal test = import 'jsonnetunit/test.libsonnet';\n\nlocal configFrom = config.from({\n  kind: 'config',\n  metadata: {\n    name: 'one',\n  },\n});\n\n{\n  type: {\n    actual: configFrom.type,\n    expect: 'config',\n  },\n  render: {\n    actual: configFrom.render(),\n    expect: {\n      kind: 'config',\n      metadata: {\n        name: 'one',\n      },\n    },\n  },\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"yaml-output-2",children:"YAML output"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:"render:\n  actual:\n    kind: config\n    metadata:\n      name: one\n  expect:\n    kind: config\n    metadata:\n      name: one\ntype:\n  actual: config\n  expect: config\n"})}),"\n",(0,o.jsx)(e.h3,{id:"config-override-function",children:"config override function"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"local config = import '../../config.libsonnet';\n\nlocal config = import '../../config.libsonnet';\n\nlocal testConfig = config.new(function(ctx, props) {\n  kind: 'config',\n  metadata: {\n    name: props.name,\n  },\n}, {\n  name: 'test',\n}).override(\n  function(props)\n    {\n      name: 'override-' + props.name,\n    }\n);\n\n{\n  actual: testConfig.render(),\n  expect: {\n    kind: 'config',\n    metadata: {\n      name: 'override-test',\n    },\n  },\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"yaml-output-3",children:"YAML output"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:"actual:\n  kind: config\n  metadata:\n    name: override-test\nexpect:\n  kind: config\n  metadata:\n    name: override-test\n"})}),"\n",(0,o.jsx)(e.h3,{id:"config-override",children:"config override"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"local config = import '../../config.libsonnet';\n\nlocal config = import '../../config.libsonnet';\n\nlocal testConfig = config.new(function(ctx, props) {\n  kind: 'config',\n  metadata: {\n    name: props.name,\n  },\n}, {\n  name: 'test',\n}).override(\n  {\n    name: 'not-test',\n  }\n);\n\n{\n  actual: testConfig.render(),\n  expect: {\n    kind: 'config',\n    metadata: {\n      name: 'not-test',\n    },\n  },\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"yaml-output-4",children:"YAML output"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:"actual:\n  kind: config\n  metadata:\n    name: not-test\nexpect:\n  kind: config\n  metadata:\n    name: not-test\n"})})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>c,x:()=>r});var i=t(6540);const o={},a=i.createContext(o);function c(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:c(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);