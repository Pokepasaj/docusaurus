"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[553],{6850:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"app","title":"app","description":"This module handles application configurations, allowing for the creation and rendering of configurations through multiple stages.","source":"@site/docs/app.md","sourceDirName":".","slug":"/app","permalink":"/docusaurus/app","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/app.md","tags":[],"version":"current","frontMatter":{"id":"app","title":"app"},"sidebar":"LearnSidebar","next":{"title":"config","permalink":"/docusaurus/config"}}');var i=t(4848),s=t(8453);const r={id:"app",title:"app"},o=void 0,d={},p=[{value:"Examples",id:"examples",level:2},{value:"simple app",id:"simple-app",level:3},{value:"Jsonnet",id:"jsonnet",level:3},{value:"YAML output",id:"yaml-output",level:3},{value:"app inheritance",id:"app-inheritance",level:3},{value:"jsonnet",id:"jsonnet-1",level:3},{value:"YAML output",id:"yaml-output-1",level:3}];function l(n){const e={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"This module handles application configurations, allowing for the creation and rendering of configurations through multiple stages."}),"\n",(0,i.jsx)(e.p,{children:"\u2022 new \u2192 creates a new manifest with specified features, properties, profiles, and extensions. Filter & map allow further customization for the configurations rendering"}),"\n",(0,i.jsx)(e.p,{children:"\u2022 render \u2192 resolves and renders the configuration trough extensions and filters"}),"\n",(0,i.jsx)(e.p,{children:"\u2022 init \u2192 initilizes the configuration with profile-specific properties, merging them with the global ones"}),"\n",(0,i.jsx)(e.p,{children:"\u2022 resolve \u2192 resolves configurations from sources like features, extensions & individual config objects filtering out null values"}),"\n",(0,i.jsx)(e.p,{children:"\u2022 feature \u2192 Extracts and processes feature configurations, filtering out null values."}),"\n",(0,i.jsx)(e.p,{children:"\u2022 extensions \u2192 Applies extensions to configurations and includes additional extensions from features."}),"\n",(0,i.jsx)(e.p,{children:"\u2022 extend \u2192 Creates a new extended manifest by adding new properties, profiles, and configurations."}),"\n",(0,i.jsx)(e.p,{children:"\u2022 filter  \u2192 Returns a new manifest with an additional filter function applied."}),"\n",(0,i.jsx)(e.p,{children:"\u2022 map \u2192 Returns a new manifest with a mapping function applied to transform configurations."}),"\n",(0,i.jsx)(e.p,{children:"\u2022 find \u2192 Searches the manifest and returns the first configuration that matches the given condition."}),"\n",(0,i.jsx)(e.p,{children:"\u2022 get \u2192 Retrieves a configuration by a specific path in its body."}),"\n",(0,i.jsx)(e.p,{children:"\u2022 kget \u2192 Retrieves a configuration by its kind and metadata.name fields."}),"\n",(0,i.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(e.h3,{id:"simple-app",children:"simple app"}),"\n",(0,i.jsx)(e.h3,{id:"jsonnet",children:"Jsonnet"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-local",metastring:"app = import '../../app.libsonnet';",children:"local config = import '../../config.libsonnet';\nlocal extension = import '../../extension.libsonnet';\nlocal feature = import '../../feature.libsonnet';\nlocal manifest = import '../../manifest.libsonnet';\n\nlocal ext = extension.new(\n  function(ctx, target, props) target {\n    metadata+: {\n      extended: true,\n      profile: ctx.profile(),\n    },\n  },\n  selector=function(ctx, target, props) target.is('Deployment'),\n);\n\n// test supported config types\nlocal appTest = app.new(\n  props={\n    name: 'default',\n  },\n  profiles={\n    dev: {\n      name: 'dev',\n    },\n    stg: {\n      name: 'stg',\n    },\n    prd: {\n      name: 'prd',\n    },\n  },\n  features=[\n    {\n      kind: 'Deployment',\n      metadata: {\n        name: 'test1',\n      },\n    },\n    feature.new([\n      [{\n        kind: 'Deployment',\n        metadata: {\n          name: 'test2',\n        },\n      }, {\n        kind: 'Service',\n        metadata: {\n          name: 'test3',\n        },\n      }],\n    ]),\n    feature.new([\n      [{\n        kind: 'Ingress4',\n        metadata: {\n          name: 'test',\n        },\n      }],\n    ], extensions=[ext]),\n  ],\n);\n\n{\n  actual: appTest.init(profile='prd'),\n  expect: [\n    {\n      kind: 'Deployment5',\n      metadata: {\n        extended: true,\n        name: 'test2',\n        profile: 'prd',\n      },\n    },\n    {\n      kind: 'Deployment6',\n      metadata: {\n        extended: true,\n        name: 'test',\n        profile: 'prd',\n      },\n    },\n    {\n      kind: 'Service7',\n      metadata: {\n        name: 'test',\n      },\n    },\n    {\n      kind: 'Ingress8',\n      metadata: {\n        name: 'test',\n      },\n    },\n  ],\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"yaml-output",children:"YAML output"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:"actual:\n  - kind: Deployment\n    metadata:\n      extended: true\n      name: test1\n      profile: prd\n  - kind: Deployment\n    metadata:\n      extended: true\n      name: test2\n      profile: prd\n  - kind: Service\n    metadata:\n      name: test3\n  - kind: Ingress4\n    metadata:\n      name: test\nexpect:\n  - kind: Deployment5\n    metadata:\n      extended: true\n      name: test2\n      profile: prd\n  - kind: Deployment6\n    metadata:\n      extended: true\n      name: test\n      profile: prd\n  - kind: Service7\n    metadata:\n      name: test\n  - kind: Ingress8\n    metadata:\n      name: test\n\n"})}),"\n",(0,i.jsx)(e.h3,{id:"app-inheritance",children:"app inheritance"}),"\n",(0,i.jsx)(e.h3,{id:"jsonnet-1",children:"jsonnet"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsonnet",children:"local app = import '../../app.libsonnet';\nlocal config = import '../../config.libsonnet';\nlocal extension = import '../../extension.libsonnet';\nlocal feature = import '../../feature.libsonnet';\nlocal manifest = import '../../manifest.libsonnet';\n\nlocal ext = extension.new(\n  function(ctx, target, props) target {\n    metadata+: {\n      extended: true,\n      profile: ctx.profile(),\n    },\n  },\n  selector=function(ctx, target, props) target.is('Deployment'),\n);\n\n// test supported config types\nlocal appTest = app.new(\n  props={\n    name: 'default',\n  },\n  profiles={\n    dev: {\n      name: 'dev',\n    },\n    stg: {\n      name: 'stg',\n    },\n    prd: {\n      name: 'prd',\n    },\n  },\n  features=[\n    {\n      kind: 'Deployment',\n      metadata: {\n        name: 'test1',\n      },\n    },\n    feature.new([\n      [{\n        kind: 'Deployment',\n        metadata: {\n          name: 'test2',\n        },\n      }, {\n        kind: 'Service',\n        metadata: {\n          name: 'test3',\n        },\n      }],\n    ]),\n    feature.new([\n      [{\n        kind: 'Ingress4',\n        metadata: {\n          name: 'test',\n        },\n      }],\n    ], extensions=[ext]),\n  ],\n);\n\n{\n  actual: appTest.init(profile='prd'),\n  expect: [\n    {\n      kind: 'Deployment5',\n      metadata: {\n        extended: true,\n        name: 'test2',\n        profile: 'prd',\n      },\n    },\n    {\n      kind: 'Deployment6',\n      metadata: {\n        extended: true,\n        name: 'test',\n        profile: 'prd',\n      },\n    },\n    {\n      kind: 'Service7',\n      metadata: {\n        name: 'test',\n      },\n    },\n    {\n      kind: 'Ingress8',\n      metadata: {\n        name: 'test',\n      },\n    },\n  ],\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"yaml-output-1",children:"YAML output"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:"actual:\n  - kind: Deployment\n    metadata:\n      extended: true\n      name: test1\n      profile: prd\n  - kind: Deployment\n    metadata:\n      extended: true\n      name: test2\n      profile: prd\n  - kind: Service\n    metadata:\n      name: test3\n  - kind: Ingress4\n    metadata:\n      name: test\nexpect:\n  - kind: Deployment5\n    metadata:\n      extended: true\n      name: test2\n      profile: prd\n  - kind: Deployment6\n    metadata:\n      extended: true\n      name: test\n      profile: prd\n  - kind: Service7\n    metadata:\n      name: test\n  - kind: Ingress8\n    metadata:\n      name: test\n\n"})})]})}function c(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var a=t(6540);const i={},s=a.createContext(i);function r(n){const e=a.useContext(s);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);